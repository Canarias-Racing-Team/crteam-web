---
import Card from "./Card.astro";
import type { CarComponentType } from "@/types";
import { Icon } from "astro-icon/components";

// Generar un id único si no se pasa ninguno
let {
  carComponents = [],
  id = "",
  className = "",
  autoplay = true,
  interval = 5000,
} = Astro.props;
if (!id) {
  id = `carcards-${Math.random().toString(36).slice(2, 10)}`;
}
---

<!-- Script para manejar el cambio de cards con autoplay -->
<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    // Variables para autoplay
    var autoplayTimer = null;
    var isAutoplayPaused = false;
    var currentCardIndex = 0;

    // Buscar el contenedor principal y obtener el id real
    var mainDiv = document.querySelector("[data-id]");
    if (!mainDiv) return;
    var id = mainDiv instanceof HTMLElement ? mainDiv.dataset.id : null;
    if (!id) return;
    var menu = document.getElementById(id + "-menu");
    if (!menu) return;

    var buttons = menu.querySelectorAll("button[data-idx]");
    var cards = document.querySelectorAll("[id^='" + id + "-card-']");
    var container = document.getElementById(id);

    if (cards.length === 0) return;

    // Función para activar card y botón
    function activate(idx) {
      if (idx < 0) idx = cards.length - 1;
      if (idx >= cards.length) idx = 0;

      currentCardIndex = idx;

      cards.forEach(function (el, i) {
        el.classList.toggle("car-card-active", i === idx);
      });
      buttons.forEach(function (b, i) {
        b.classList.toggle("car-menu-btn-active", i === idx);
      });
    }

    // Función para avanzar al siguiente card automáticamente
    function nextCardAuto() {
      activate(currentCardIndex + 1);
    }

    // Iniciar autoplay
    function startAutoplay() {
      if (isAutoplayPaused || !container) return;

      var autoplayEnabled = container.dataset.autoplay === "true";
      if (!autoplayEnabled) return;

      var intervalValue = container.dataset.interval || "5000";
      var interval = parseInt(intervalValue);

      clearTimeout(autoplayTimer);
      autoplayTimer = setTimeout(function () {
        if (!isAutoplayPaused) {
          nextCardAuto();
          startAutoplay();
        }
      }, interval);
    }

    // Pausar autoplay temporalmente
    function pauseAutoplay(duration) {
      duration = duration || 10000;
      isAutoplayPaused = true;
      clearTimeout(autoplayTimer);

      setTimeout(function () {
        isAutoplayPaused = false;
        startAutoplay();
      }, duration);
    }

    // Listeners para navegación manual
    buttons.forEach(function (btn, idx) {
      btn.addEventListener("click", function () {
        activate(idx);
        pauseAutoplay(); // Pausar cuando el usuario interactúa
      });
    });

    // Pausar autoplay en hover
    if (container) {
      container.addEventListener("mouseenter", function () {
        isAutoplayPaused = true;
        clearTimeout(autoplayTimer);
      });

      container.addEventListener("mouseleave", function () {
        isAutoplayPaused = false;
        startAutoplay();
      });
    }

    // Activar el primero por defecto e iniciar autoplay
    activate(0);
    startAutoplay();
  });
</script>

<div
  id={id}
  data-id={id}
  data-autoplay={autoplay}
  data-interval={interval}
  class={`join join-vertical md:join-horizontal gap-2 w-full ${className}`}
>
  <div class="join-item h-full">
    <ul
      id={`${id}-menu`}
      class="menu bg-base-300 rounded-box w-full h-full flex flex-row md:flex-col justify-around items-center md:items-stretch"
    >
      {
        carComponents.map((component: CarComponentType, idx: number) => (
          <li class="flex-1 flex justify-center md:justify-start">
            <button
              type="button"
              class="tooltip tooltip-bottom md:tooltip-left cursor-pointer p-2 w-10 h-10 flex items-center justify-center rounded-lg"
              data-tip={component.name}
              tabindex="0"
              data-idx={idx}
              aria-label={component.name}
            >
              {component.icon ? (
                <Icon name={`mdi:${component.icon}`} class="h-5 w-5" />
              ) : (
                <Icon name="mdi:car" class="h-5 w-5" />
              )}
            </button>
          </li>
        ))
      }
    </ul>
  </div>
  <div class="cards-container" style="height: inherit;">
    {
      carComponents.map((component: CarComponentType, idx: number) => (
        <div
          id={`${id}-card-${idx}`}
          class={`car-card${idx === 0 ? " car-card-active" : ""}`}
        >
          <Card
            image={component.src && component}
            content={[
              { type: "title", text: component.name },
              { type: "paragraph", text: component.brief },
            ]}
            className="md:card-side"
            style="height:100%;"
          />
        </div>
      ))
    }
  </div>
</div>

<style>
  .cards-container {
    position: relative;
    width: 100%;
    height: 298px;
    min-height: 220px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .car-card {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: none;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
  }
  .car-card.car-card-active {
    display: flex;
  }
  .menu:active {
    --menu-active-bg: none;
  }
  .car-menu-btn-active {
    color: var(--color-primary);
  }
  .tooltip {
    --tt-bg: var(--color-primary);
  }
  .tooltip:before {
    background: var(--color-primary);
    color: var(--color-primary-content);
  }
</style>

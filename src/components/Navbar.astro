---
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";
import logoCRT from "@assets/logos-crteam/CRT BLANCO.png";
import { getNotionPages } from "@utils/notion";

const newsCount = (await getNotionPages()).length;
const newsCountSpan = newsCount > 99 ? "99+" : newsCount.toString();
const currentPath = new URL(Astro.request.url).pathname;
const navItems = [
  { name: "El Equipo", href: "/#team" },
  { name: "El Coche", href: "/#car" },
  { name: "Noticias", href: "/news", span: newsCountSpan },
  { name: "Patrocinadores", href: "/#partners" },
  { name: "Contacto", href: "/#contact" },
];
---

<div
  id="navbar"
  class="navbar fixed top-0 left-0 w-full z-50 mx-auto px-4 md:px-8 lg:px-16 xl:px-24 2xl:px-32"
  style="
    background-color: transparent;
    transition: background-color 0.3s ease, backdrop-filter 0.3s ease;
    will-change: background-color, backdrop-filter;
    height: 4rem;
    min-height: 4rem;
  "
>
  <!-- Transparente por defecto y si hay scroll opaco -->
  <script type="text/javascript" is:inline>
    // Navbar background blur/opaque on scroll
    document.addEventListener("DOMContentLoaded", () => {
      const navbar = document.getElementById("navbar");
      const scrolled = {
        backgroundColor: "hsl(var(--b1) / 0.9)",
        backdropFilter: "blur(8px)",
        boxShadow:
          "0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)",
      };
      const transparent = {
        backgroundColor: "transparent",
        backdropFilter: "none",
        boxShadow: "none",
      };
      function setNavbarStyle() {
        Object.assign(
          navbar.style,
          window.scrollY > 10 ? scrolled : transparent
        );
      }
      window.addEventListener("scroll", setNavbarStyle, { passive: true });
      setNavbarStyle();
    });
  </script>

  <div class="flex-1">
    <a
      class="btn btn-link"
      href="/"
      style="height: 3rem; min-height: 3rem;"
      aria-label="Inicio"
    >
      <Image
        src={logoCRT}
        alt="Canarias Racing Team Logo"
        width={138}
        height={138}
        sizes="(max-width: 768px) 80px, 138px"
        loading="eager"
        class="h-3/4 md:h-full w-auto"
        style="height: 2rem; width: auto;"
      />
    </a>
  </div>

  <!-- Menu Desktop -->
  <div class="flex-none hidden lg:block">
    <div
      role="tablist"
      aria-label="Navegación principal"
      class="tabs tabs-border py-2"
      id="navbar-tabs"
      style="height: 3rem; min-height: 3rem;"
    >
      {
        navItems.map(({ name, href, span }) => {
          const isAnchor = href.includes("#");
          const isActive = !isAnchor && currentPath === href;
          return (
            <a
              id={`tab-${name.toLowerCase()}`}
              role="tab"
              aria-current={isActive ? "page" : undefined}
              class={`text-lg tab ${isActive ? "tab-active" : ""} ${isActive ? "tab-news-active" : "tab-news-inactive"}`}
              href={href}
              style="height: 2.5rem; min-height: 2.5rem; display: flex; align-items: center;"
              {...(isAnchor ? { "data-anchor": href.split("#")[1] } : {})}
            >
              {name}
              {span && (
                <span
                  class={`indicator-item badge ml-2 badge-news ${isActive ? "badge-news-active" : "badge-news-inactive"}`}
                  aria-label="Número de noticias"
                >
                  {span}
                </span>
              )}
            </a>
          );
        })
      }
    </div>
    <!-- El CSS de los tabs y badges se ha movido a app.css -->
  </div>

  <!-- Menu Mobile -->
  <div class="flex-none lg:hidden pe-4">
    <button
      class="btn btn-square btn-ghost btn-xl"
      id="mobile-menu-toggle"
      style="height: 3rem; width: 3rem; min-height: 3rem;"
      aria-label="Abrir menú"
    >
      <Icon
        name="mdi:menu"
        class="w-10 h-10"
        style="width: 2rem; height: 2rem;"
      />
    </button>
  </div>
</div>

<!-- Mobile Menu Drawer -->
<div
  id="mobile-menu"
  class="fixed inset-0 z-[60] lg:hidden"
  style="visibility: hidden; opacity: 0; transition: opacity 0.3s ease, visibility 0.3s ease;"
>
  <div
    class="fixed inset-0 bg-black"
    id="mobile-menu-overlay"
    style="opacity: 0; transition: opacity 0.3s ease;"
  >
  </div>
  <div
    class="fixed top-0 right-0 h-full w-80 bg-base-100 shadow-xl z-[70]"
    id="mobile-menu-drawer"
    style="transform: translateX(100%); transition: transform 0.3s ease; will-change: transform; contain: layout;"
  >
    <div
      class="flex justify-between items-center p-4 border-b border-base-300"
      style="min-height: 4rem;"
    >
      <h2
        class="text-xl font-semibold text-base-content"
        style="line-height: 1.2;"
        aria-label="Menú"
      >
        Menú
      </h2>
      <button
        class="btn btn-square btn-ghost btn-xl"
        id="mobile-menu-close"
        style="height: 3rem; width: 3rem; min-height: 3rem;"
        aria-label="Cerrar menú"
      >
        <Icon
          name="mdi:close"
          class="w-10 h-10"
          style="width: 2rem; height: 2rem;"
        />
      </button>
    </div>
    <nav class="p-4" style="min-height: calc(100vh - 4rem); contain: layout;">
      <ul class="space-y-2" style="min-height: 20rem;">
        {
          navItems.map(({ name, href, span }) => {
            const isAnchor = href.includes("#");
            const isActive = !isAnchor && currentPath === href;
            return (
              <li style="min-height: 3rem;">
                <a
                  class={`block px-4 py-3 rounded-lg transition-colors hover:bg-base-300${isActive ? " bg-primary text-primary-content" : ""}`}
                  aria-current={isActive ? "page" : undefined}
                  href={href}
                  style="min-height: 3rem; display: flex; align-items: center;"
                  aria-label={name}
                  {...(isAnchor ? { "data-anchor": href.split("#")[1] } : {})}
                >
                  <span class="text-lg" style="line-height: 1.2; flex:1;">
                    {name}
                  </span>
                  {span && (
                    <span
                      class="badge badge-lg badge-outline ml-2"
                      style="min-width: 2rem; height: 1.5rem;"
                      aria-label="Número de noticias"
                    >
                      {span}
                    </span>
                  )}
                </a>
              </li>
            );
          })
        }
      </ul>
    </nav>
  </div>

  <script is:inline>
    // Tabs de ancla activos según sección visible y menú móvil
    document.addEventListener("DOMContentLoaded", () => {
      // --- Anchor tab highlight ---
      const anchorTabs = document.querySelectorAll("[data-anchor]");
      if (anchorTabs.length) {
        const anchors = Array.from(anchorTabs).map((tab) =>
          tab.getAttribute("data-anchor")
        );
        const sections = anchors
          .map((id) => document.getElementById(id))
          .filter(Boolean);
        function findActiveSection() {
          const scrollPos = window.scrollY + 500;
          if (
            window.scrollY + window.innerHeight >=
            document.documentElement.scrollHeight - 50
          )
            return "contact";
          for (let i = sections.length - 1; i >= 0; i--) {
            if (scrollPos >= sections[i].offsetTop) {
              if (sections[i].id === "partners") {
                const next = sections[i + 1];
                if (next && scrollPos < next.offsetTop + 150)
                  return sections[i].id;
              }
              return sections[i].id;
            }
          }
          return null;
        }
        function updateActiveTab() {
          const activeId = findActiveSection();
          anchorTabs.forEach((tab) => {
            const tabId = tab.getAttribute("data-anchor");
            tab.classList.toggle("tab-active", tabId === activeId);
            tab.style.color =
              tabId === activeId
                ? "var(--color-primary)"
                : "var(--color-base-content)";
            tab.style.opacity = tabId === activeId ? "1" : "0.9";
          });
        }
        window.addEventListener("scroll", updateActiveTab, { passive: true });
        window.addEventListener("resize", updateActiveTab);
        anchorTabs.forEach((tab) => {
          tab.addEventListener("click", function () {
            const id = tab.getAttribute("data-anchor");
            if (id) setTimeout(updateActiveTab, 200);
          });
        });
        updateActiveTab();
      }
      // --- Mobile menu ---
      const mobileMenuToggle = document.getElementById("mobile-menu-toggle");
      const mobileMenu = document.getElementById("mobile-menu");
      const mobileMenuDrawer = document.getElementById("mobile-menu-drawer");
      const mobileMenuClose = document.getElementById("mobile-menu-close");
      const mobileMenuOverlay = document.getElementById("mobile-menu-overlay");
      if (
        mobileMenu &&
        mobileMenuToggle &&
        mobileMenuDrawer &&
        mobileMenuClose &&
        mobileMenuOverlay
      ) {
        function openMobileMenu() {
          mobileMenu.style.visibility = "visible";
          mobileMenu.style.opacity = "1";
          mobileMenuOverlay.style.opacity = "0.5";
          mobileMenuDrawer.offsetHeight;
          mobileMenuDrawer.style.transform = "translateX(0)";
        }
        function closeMobileMenu() {
          mobileMenuDrawer.style.transform = "translateX(100%)";
          mobileMenuOverlay.style.opacity = "0";
          setTimeout(() => {
            mobileMenu.style.opacity = "0";
            setTimeout(() => {
              mobileMenu.style.visibility = "hidden";
            }, 300);
          }, 100);
        }
        mobileMenuToggle.addEventListener("click", openMobileMenu);
        mobileMenuClose.addEventListener("click", closeMobileMenu);
        mobileMenuOverlay.addEventListener("click", closeMobileMenu);
        mobileMenu.querySelectorAll("a").forEach((link) => {
          link.addEventListener("click", () =>
            setTimeout(closeMobileMenu, 100)
          );
        });
      }
    });
  </script>
</div>

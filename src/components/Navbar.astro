---
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";
import logoCRT from "@assets/logos-crteam/CRT BLANCO.png"; // Importa la imagen
import { getNotionPages } from "@utils/notion";
const newsCount = await getNotionPages();
const newsCountSpan =
  newsCount.length > 99 ? "99+" : newsCount.length.toString();

const currentPath = new URL(Astro.request.url).pathname;
const navItem = [
  { name: "El Equipo", href: "/#team" },
  { name: "El Coche", href: "/#car" },
  { name: "Noticias", href: "/news", span: newsCountSpan },
  { name: "Patrocinadores", href: "/#partners" },
  { name: "Contacto", href: "/#contact" },
];
---

<div
  id="navbar"
  class="navbar bg-transparent transition-colors duration-300 fixed top-0 left-0 w-full z-50 mx-auto px-4 md:px-8 lg:px-16 xl:px-24 2xl:px-32"
>
  <!-- Transparente por defecto y si hay scroll opaco -->
  <script type="text/javascript" is:inline>
    document.addEventListener("DOMContentLoaded", function () {
      const navbar = document.getElementById("navbar");
      function handleScroll() {
        if (window.scrollY > 10) {
          navbar.classList.remove("bg-transparent");
          navbar.classList.add(
            "bg-base-100",
            "bg-opacity-90",
            "backdrop-blur",
            "navbar-gradient"
          );
        } else {
          navbar.classList.add("bg-transparent");
          navbar.classList.remove(
            "bg-base-100",
            "bg-opacity-90",
            "backdrop-blur",
            "navbar-gradient"
          );
        }
      }
      window.addEventListener("scroll", handleScroll);
      handleScroll();
    });
  </script>

  <div class="flex-1">
    <a class="btn btn-link text-xl" href="/">
      <Image
        src={logoCRT}
        alt="Canarias Racing Team Logo"
        width={logoCRT.width}
        height={logoCRT.height}
        loading="eager"
        class="h-full w-auto"
      />
    </a>
  </div>

  <!-- Menu Desktop -->
  <div class="flex-none hidden lg:block">
    <div role="tablist" class="tabs tabs-border py-2" id="navbar-tabs">
      {
        navItem.map((item) => {
          const isAnchor = item.href.includes("#");
          const isActive = !isAnchor && currentPath === item.href;
          return (
            <a
              role="tab"
              class={`text-lg tab ${isActive ? "tab-active" : ""}`}
              href={item.href}
              {...(isAnchor ? { "data-anchor": item.href.split("#")[1] } : {})}
            >
              {item.name}
              {item.span && (
                <span
                  class={`indicator-item badge ml-2 ${
                    isActive ? "badge-primary" : "badge-outline badge-ghost"
                  }`}
                >
                  {item.span}
                </span>
              )}
            </a>
          );
        })
      }
    </div>
  </div>

  <!-- Menu Mobile -->
  <div class="flex-none lg:hidden pe-4">
    <button class="btn btn-square btn-ghost btn-xl" id="mobile-menu-toggle">
      <Icon name="mdi:menu" class="w-10 h-10" />
    </button>
  </div>
</div>

<!-- Mobile Menu Drawer -->
<div id="mobile-menu" class="fixed inset-0 z-[60] lg:hidden hidden">
  <div class="fixed inset-0 bg-black bg-opacity-50" id="mobile-menu-overlay">
  </div>
  <div
    class="fixed top-0 right-0 h-full w-80 bg-base-100 shadow-xl transform translate-x-full transition-transform duration-300 z-[70]"
    id="mobile-menu-drawer"
  >
    <div class="flex justify-between items-center p-4 border-b border-base-300">
      <h2 class="text-xl font-semibold text-base-content">Menú</h2>
      <button class="btn btn-square btn-ghost btn-xl" id="mobile-menu-close">
        <Icon name="mdi:close" class="w-10 h-10" />
      </button>
    </div>
    <nav class="p-4">
      <ul class="space-y-2">
        {
          navItem.map((item) => {
            const isAnchor = item.href.includes("#");
            const isActive = !isAnchor && currentPath === item.href;
            return (
              <li>
                <a
                  class={`block px-4 py-3 rounded-lg transition-colors hover:bg-base-300 ${
                    isActive ? "bg-primary text-primary-content" : ""
                  }`}
                  href={item.href}
                  {...(isAnchor
                    ? { "data-anchor": item.href.split("#")[1] }
                    : {})}
                >
                  <div class="flex items-center justify-between">
                    <span class="text-lg">{item.name}</span>
                    {item.span && (
                      <span class="badge badge-lg badge-outline">
                        {item.span}
                      </span>
                    )}
                  </div>
                </a>
              </li>
            );
          })
        }
      </ul>
    </nav>
  </div>
</div>

<script is:inline>
  // Activar tab de ancla según la sección visible
  document.addEventListener("DOMContentLoaded", function () {
    const navbar = document.getElementById("navbar");
    const anchorTabs = document.querySelectorAll("[data-anchor]");
    if (anchorTabs.length === 0) return;

    const anchors = Array.from(anchorTabs).map((tab) =>
      tab.getAttribute("data-anchor")
    );
    const sections = anchors
      .map((id) => document.getElementById(id))
      .filter(Boolean);

    if (sections.length === 0) return;

    const findActiveSection = () => {
      const scrollPos = window.scrollY + 500; // Offset reducido para activar antes

      // Si llegamos al final, activar contact
      if (
        window.scrollY + window.innerHeight >=
        document.documentElement.scrollHeight - 50
      ) {
        return "contact";
      }

      // Buscar sección activa
      for (let i = sections.length - 1; i >= 0; i--) {
        if (scrollPos >= sections[i].offsetTop) {
          const sectionId = sections[i].id;

          // Si es partners, añadir un buffer pequeño para que tarde un poco más en cambiar
          if (sectionId === "partners") {
            const nextSection = sections[i + 1];

            // Solo añadir buffer si hay una sección siguiente y no hemos avanzado mucho
            if (nextSection && scrollPos < nextSection.offsetTop + 150) {
              return sectionId;
            }
          }

          return sectionId;
        }
      }

      return null;
    };

    const updateActiveTab = () => {
      const activeId = findActiveSection();

      anchorTabs.forEach((tab) => {
        const tabId = tab.getAttribute("data-anchor");
        if (tabId === activeId) {
          tab.classList.add("tab-active");
        } else {
          tab.classList.remove("tab-active");
        }
      });
    };

    // Escuchar scroll con throttling suave
    let scrollTimeout;
    let isScrolling = false;

    window.addEventListener("scroll", () => {
      if (!isScrolling) {
        isScrolling = true;
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
          updateActiveTab();
          isScrolling = false;
        }, 100); // Reducir delay
      }
    });

    // Activar inicial
    updateActiveTab();

    // Click en tabs
    anchorTabs.forEach((tab) => {
      tab.addEventListener("click", function () {
        const id = tab.getAttribute("data-anchor");
        if (id) {
          setTimeout(() => {
            anchorTabs.forEach((t) => {
              if (t.getAttribute("data-anchor") === id) {
                t.classList.add("tab-active");
              } else {
                t.classList.remove("tab-active");
              }
            });
          }, 200);
        }
      });
    });

    // Resize
    window.addEventListener("resize", updateActiveTab);
  });

  // Mobile menu functionality
  document.addEventListener("DOMContentLoaded", function () {
    const mobileMenuToggle = document.getElementById("mobile-menu-toggle");
    const mobileMenu = document.getElementById("mobile-menu");
    const mobileMenuDrawer = document.getElementById("mobile-menu-drawer");
    const mobileMenuClose = document.getElementById("mobile-menu-close");
    const mobileMenuOverlay = document.getElementById("mobile-menu-overlay");

    const openMobileMenu = () => {
      mobileMenu.classList.remove("hidden");
      setTimeout(() => {
        mobileMenuDrawer.classList.remove("translate-x-full");
      }, 10);
    };

    const closeMobileMenu = () => {
      mobileMenuDrawer.classList.add("translate-x-full");
      setTimeout(() => {
        mobileMenu.classList.add("hidden");
      }, 300);
    };

    mobileMenuToggle.addEventListener("click", openMobileMenu);
    mobileMenuClose.addEventListener("click", closeMobileMenu);
    mobileMenuOverlay.addEventListener("click", closeMobileMenu);

    // Close mobile menu on navigation
    const mobileNavLinks = mobileMenu.querySelectorAll("a");
    mobileNavLinks.forEach((link) => {
      link.addEventListener("click", () => {
        setTimeout(closeMobileMenu, 100);
      });
    });
  });
</script>

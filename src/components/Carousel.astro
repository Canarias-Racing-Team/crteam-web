---
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";
import type { CarouselItemType } from "@types";

let {
  items,
  id,
  className = "",
  autoplay = true,
  interval = 4000,
} = Astro.props;
// Protección extra: nunca null/undefined y siempre array
if (!Array.isArray(items))
  items =
    items && typeof items === "object" && typeof items.length === "number"
      ? Array.from(items)
      : [];
if (!items) items = [];
---

{
  Array.isArray(items) && items.length > 0 ? (
    <div class={className}>
      <div
        class="custom-carousel w-full h-full relative overflow-hidden"
        id={id}
        data-autoplay={autoplay}
        data-interval={interval}
      >
        {/* Carousel items */}
        {items.map((image: CarouselItemType, i: number) => {
          if (!image || typeof image !== "object" || !("src" in image))
            return null;
          const slideId = `slide${i + 1}`;
          const prevId = `#slide${((i - 1 + items.length) % items.length) + 1}`;
          const nextId = `#slide${((i + 1) % items.length) + 1}`;
          return (
            <div
              id={slideId}
              class={`custom-carousel-item absolute inset-0 w-full h-full flex items-center justify-center transition-opacity duration-500 ease-in-out ${i === 0 ? "opacity-100 pointer-events-auto" : "opacity-0 pointer-events-none"}`}
            >
              <div class="loading-container relative w-full h-full flex items-center justify-center">
                <span class="loading loading-spinner loading-md" />
                <Image
                  alt={image.alt ?? `Imagen ${i + 1}`}
                  src={image.src}
                  inferSize
                  sizes="(max-width: 768px) 256px, 456px"
                  class="w-full h-full rounded-box object-cover object-center hidden"
                  loading="eager"
                  onload="this.parentElement.querySelector('.loading')?.remove(); this.classList.remove('hidden');"
                />
              </div>
              <div class="absolute top-1/2 right-2 left-2 sm:right-4 sm:left-4 md:right-6 md:left-6 flex -translate-y-1/2 transform justify-between">
                <a
                  href={prevId}
                  class="btn btn-circle btn-sm sm:btn-md bg-black/70 hover:bg-black/90 text-white border-none backdrop-blur-sm"
                  aria-label="Anterior"
                >
                  <Icon name="mdi:chevron-left" class="h-4 w-4 sm:h-5 sm:w-5" />
                </a>
                <a
                  href={nextId}
                  class="btn btn-circle btn-sm sm:btn-md bg-black/70 hover:bg-black/90 text-white border-none backdrop-blur-sm"
                  aria-label="Siguiente"
                >
                  <Icon
                    name="mdi:chevron-right"
                    class="h-4 w-4 sm:h-5 sm:w-5"
                  />
                </a>
              </div>
            </div>
          );
        })}
      </div>
      <div class="carousel-buttons flex flex-wrap justify-center gap-2 mt-4 px-2 sm:px-4">
        {/* Carousel buttons */}
        {items.map((item: CarouselItemType, i: number) => {
          if (!item || typeof item !== "object" || !("src" in item))
            return null;
          const idx = i + 1;
          return (
            <a
              href={`#slide${idx}`}
              id={`carousel-btn-${idx}`}
              class="btn btn-circle btn-xs sm:btn-sm btn-primary min-h-6 h-6 w-6 sm:min-h-8 sm:h-8 sm:w-8 text-xs sm:text-sm"
              data-slide-idx={i}
              style={{
                fontSize: "0.75rem", // Ajustar tamaño de fuente para móviles
                padding: "0.25rem", // Reducir padding en botones pequeños
              }}
            >
              {idx}
            </a>
          );
        })}
      </div>
    </div>
  ) : null
}
<script is:inline>
  let autoplayTimer = null;
  let isAutoplayPaused = false;
  let currentSlideIndex = 1;

  // Función simple para mostrar un slide específico
  function showSlide(slideNumber) {
    const carouselItems = document.querySelectorAll(".custom-carousel-item");
    const carouselBtns = document.querySelectorAll('[id^="carousel-btn-"]');

    if (carouselItems.length === 0) return; // Normalizar número de slide
    const total = carouselItems.length;
    if (slideNumber < 1) slideNumber = total;
    if (slideNumber > total) slideNumber = 1;

    currentSlideIndex = slideNumber;

    // Ocultar todos los slides y actualizar botones
    carouselItems.forEach((item, i) => {
      if (i === slideNumber - 1) {
        // Mostrar slide activo
        item.style.opacity = "1";
        item.style.pointerEvents = "auto";
        item.style.zIndex = "10";
      } else {
        // Ocultar slide inactivo
        item.style.opacity = "0";
        item.style.pointerEvents = "none";
        item.style.zIndex = "1";
      }
    });

    // Actualizar botones
    carouselBtns.forEach((btn, i) => {
      if (i + 1 === slideNumber) {
        btn.classList.add("btn-primary");
        btn.setAttribute("aria-current", "page");
      } else {
        btn.classList.remove("btn-primary");
        btn.removeAttribute("aria-current");
      }
    });
  }

  // Navegar al siguiente slide automáticamente
  function nextSlideAuto() {
    showSlide(currentSlideIndex + 1);
  }

  // Iniciar autoplay
  function startAutoplay() {
    if (isAutoplayPaused) return;

    const carousel = document.querySelector(".custom-carousel");
    if (!carousel) return;

    const autoplayEnabled = carousel.dataset.autoplay === "true";
    if (!autoplayEnabled) return;

    const interval = parseInt(carousel.dataset.interval) || 4000;

    clearTimeout(autoplayTimer);
    autoplayTimer = setTimeout(() => {
      if (!isAutoplayPaused) {
        nextSlideAuto();
        startAutoplay();
      }
    }, interval);
  }

  // Pausar autoplay temporalmente
  function pauseAutoplay(duration = 8000) {
    isAutoplayPaused = true;
    clearTimeout(autoplayTimer);

    setTimeout(() => {
      isAutoplayPaused = false;
      startAutoplay();
    }, duration);
  }

  // Inicializar carrusel
  document.addEventListener("DOMContentLoaded", () => {
    // Mostrar primer slide
    showSlide(1);

    // Iniciar autoplay
    startAutoplay();

    // Pausar en hover
    const carousel = document.querySelector(".custom-carousel");
    if (carousel) {
      carousel.addEventListener("mouseenter", () => {
        isAutoplayPaused = true;
        clearTimeout(autoplayTimer);
      });

      carousel.addEventListener("mouseleave", () => {
        isAutoplayPaused = false;
        startAutoplay();
      });
    }
  });

  // Manejar navegación manual
  document.addEventListener("click", (e) => {
    // Botones numerados
    const carouselBtn = e.target.closest('[id^="carousel-btn-"]');
    if (carouselBtn) {
      e.preventDefault();
      const slideNum = parseInt(carouselBtn.textContent);
      if (slideNum) {
        showSlide(slideNum);
        pauseAutoplay();
      }
      return;
    }

    // Flechas
    const arrowBtn = e.target.closest(".btn-circle");
    if (arrowBtn && arrowBtn.getAttribute("aria-label")) {
      e.preventDefault();
      const isNext = arrowBtn.getAttribute("aria-label") === "Siguiente";
      const newSlide = isNext ? currentSlideIndex + 1 : currentSlideIndex - 1;
      showSlide(newSlide);
      pauseAutoplay();
      return;
    }
  });
</script>

---
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";
import type { CarouselItemType } from "@types";

let { items, id, className = "" } = Astro.props;
// Protección extra: nunca null/undefined y siempre array
if (!Array.isArray(items))
  items =
    items && typeof items === "object" && typeof items.length === "number"
      ? Array.from(items)
      : [];
if (!items) items = [];
console.log(`Carousel ${id} initialized with ${items.length} items`);
---

{
  Array.isArray(items) && items.length > 0 ? (
    <div class={className}>
      <div class="carousel w-full h-full" id={id}>
        {/* Carousel items */}
        {items.map((image: CarouselItemType, i: number) => {
          if (!image || typeof image !== "object" || !("src" in image))
            return null;
          const slideId = `slide${i + 1}`;
          const prevId = `#slide${((i - 1 + items.length) % items.length) + 1}`;
          const nextId = `#slide${((i + 1) % items.length) + 1}`;
          return (
            <div
              id={slideId}
              class={`carousel-item relative w-full h-full items-center justify-center transition-opacity duration-500 ease-in-out ${i === 0 ? "opacity-100 pointer-events-auto" : "opacity-0 pointer-events-none"}`}
            >
              <Image
                alt={image.alt ?? `Imagen ${i + 1}`}
                src={image.src}
                width={456}
                height={456}
                sizes="(max-width: 768px) 256px, 456px"
                class="w-full h-full rounded-box object-cover object-center"
                loading="lazy"
              />
              <div class="absolute top-1/2 right-5 left-5 flex -translate-y-1/2 transform justify-between">
                <a href={prevId} class="btn btn-circle" aria-label="Anterior">
                  <Icon name="mdi:chevron-left" class="h-5 w-5" />
                </a>
                <a href={nextId} class="btn btn-circle" aria-label="Siguiente">
                  <Icon name="mdi:chevron-right" class="h-5 w-5" />
                </a>
              </div>
            </div>
          );
        })}
      </div>
      <div class="carousel-buttons flex justify-center join mt-4">
        {/* Carousel buttons */}
        {items.map((item: CarouselItemType, i: number) => {
          if (!item || typeof item !== "object" || !("src" in item))
            return null;
          const idx = i + 1;
          return (
            <a
              href={`#slide${idx}`}
              id={`carousel-btn-${idx}`}
              class="btn btn-circle btn-sm join-item btn-primary"
              data-slide-idx={i}
            >
              {idx}
            </a>
          );
        })}
      </div>
    </div>
  ) : null
}
<script is:inline>
  // Mantiene el color primario en el botón activo y gestiona la visibilidad de los slides usando opacity/transform
  function setActiveCarouselBtn(selectedIdx = null) {
    const total = document.querySelectorAll('[id^="carousel-btn-"]').length;
    let idx = selectedIdx;
    if (idx === null) {
      const hash = window.location.hash || "#slide1";
      for (let i = 1; i <= total; i++) {
        if (hash === `#slide${i}` || (!window.location.hash && i === 1)) {
          idx = i;
          break;
        }
      }
      if (!idx) idx = 1;
    }
    for (let i = 1; i <= total; i++) {
      const btn = document.getElementById(`carousel-btn-${i}`);
      if (btn) {
        if (i === idx) {
          btn.classList.add("btn-primary");
          btn.setAttribute("aria-current", "page");
        } else {
          btn.classList.remove("btn-primary");
          btn.removeAttribute("aria-current");
        }
      }
    }
    // Mostrar solo el slide activo usando opacity y pointer-events
    document.querySelectorAll(".carousel-item").forEach((item, i) => {
      if (i === idx - 1) {
        item.classList.add("opacity-100", "pointer-events-auto");
        item.classList.remove("opacity-0", "pointer-events-none");
      } else {
        item.classList.remove("opacity-100", "pointer-events-auto");
        item.classList.add("opacity-0", "pointer-events-none");
      }
    });
  }
  // Sincroniza el slide activo con el hash o el primero
  function syncActiveSlide() {
    setActiveCarouselBtn();
  }
  window.addEventListener("hashchange", syncActiveSlide);
  window.addEventListener("DOMContentLoaded", syncActiveSlide);

  // Al hacer clic en flechas o números, solo cambia el hash (lo que dispara la lógica de actualización)
  document.addEventListener("click", function (e) {
    const target = e.target.closest('a[href^="#slide"]');
    if (target) {
      e.preventDefault();
      const hash = target.getAttribute("href");
      if (hash && window.location.hash !== hash) {
        window.location.hash = hash;
      } else {
        // Si ya está en el hash, forzar actualización visual
        syncActiveSlide();
      }
    }
  });
</script>
